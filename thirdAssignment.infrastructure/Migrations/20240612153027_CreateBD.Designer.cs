// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using thirdAssignment.Infrastructure.Persistence.Context;

#nullable disable

namespace thirdAssignment.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(thirdAssignmentAppContext))]
    [Migration("20240612153027_CreateBD")]
    partial class CreateBD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("thirdAssignment.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppointmentCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentStateId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<Guid>("ConsultingRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsultingRoomId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentStateId");

                    b.HasIndex("ConsultingRoomId");

                    b.HasIndex("ConsultingRoomId1");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.AppointmentState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending consultation"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pending results"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.ConsultingRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConsultingRooms");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConsultingRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EMailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultingRoomId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.LabTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConsultingRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsultingRoomId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultingRoomId");

                    b.HasIndex("ConsultingRoomId1");

                    b.ToTable("LabTests");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.LabTestAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConsultingRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsultingRoomId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsNotPending")
                        .HasColumnType("bit");

                    b.Property<Guid>("LabTesttId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestResult")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmetId");

                    b.HasIndex("ConsultingRoomId");

                    b.HasIndex("ConsultingRoomId1");

                    b.HasIndex("LabTesttId");

                    b.ToTable("LabtestAppointments");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConsultingRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsultingRoomId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EMailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAllergies")
                        .HasColumnType("bit");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSmoker")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultingRoomId");

                    b.HasIndex("ConsultingRoomId1");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConsultingRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConsultingRoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserRolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsultingRoomId");

                    b.HasIndex("RolId");

                    b.HasIndex("UserRolId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.UserRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRols");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Assistent"
                        });
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("thirdAssignment.Domain.Entities.AppointmentState", "AppointmentState")
                        .WithMany("appointments")
                        .HasForeignKey("AppointmentStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thirdAssignment.Domain.Entities.ConsultingRoom", "ConsultingRoom")
                        .WithMany()
                        .HasForeignKey("ConsultingRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_For_appointments_ConsultingRoomId");

                    b.HasOne("thirdAssignment.Domain.Entities.ConsultingRoom", null)
                        .WithMany("appointments")
                        .HasForeignKey("ConsultingRoomId1");

                    b.HasOne("thirdAssignment.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thirdAssignment.Domain.Entities.Doctor", null)
                        .WithMany("appointments")
                        .HasForeignKey("DoctorId1");

                    b.HasOne("thirdAssignment.Domain.Entities.Patient", "Patient")
                        .WithMany("appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentState");

                    b.Navigation("ConsultingRoom");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("thirdAssignment.Domain.Entities.ConsultingRoom", "ConsultingRoom")
                        .WithMany("doctors")
                        .HasForeignKey("ConsultingRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_For_doctors_ConsultingRoomId");

                    b.Navigation("ConsultingRoom");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.LabTest", b =>
                {
                    b.HasOne("thirdAssignment.Domain.Entities.ConsultingRoom", "ConsultingRoom")
                        .WithMany()
                        .HasForeignKey("ConsultingRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_For_labTest_ConsultingRoomId");

                    b.HasOne("thirdAssignment.Domain.Entities.ConsultingRoom", null)
                        .WithMany("labTests")
                        .HasForeignKey("ConsultingRoomId1");

                    b.Navigation("ConsultingRoom");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.LabTestAppointment", b =>
                {
                    b.HasOne("thirdAssignment.Domain.Entities.Appointment", "Appointment")
                        .WithMany("labTestAppointments")
                        .HasForeignKey("AppointmetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thirdAssignment.Domain.Entities.ConsultingRoom", "ConsultingRoom")
                        .WithMany()
                        .HasForeignKey("ConsultingRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thirdAssignment.Domain.Entities.ConsultingRoom", null)
                        .WithMany("labTestAppointments")
                        .HasForeignKey("ConsultingRoomId1");

                    b.HasOne("thirdAssignment.Domain.Entities.LabTest", "LabTest")
                        .WithMany("labTestAppointments")
                        .HasForeignKey("LabTesttId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ConsultingRoom");

                    b.Navigation("LabTest");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.Patient", b =>
                {
                    b.HasOne("thirdAssignment.Domain.Entities.ConsultingRoom", "ConsultingRoom")
                        .WithMany()
                        .HasForeignKey("ConsultingRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_For_patients_ConsultingRoomId");

                    b.HasOne("thirdAssignment.Domain.Entities.ConsultingRoom", null)
                        .WithMany("patients")
                        .HasForeignKey("ConsultingRoomId1");

                    b.Navigation("ConsultingRoom");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.User", b =>
                {
                    b.HasOne("thirdAssignment.Domain.Entities.ConsultingRoom", "ConsultingRoom")
                        .WithMany("users")
                        .HasForeignKey("ConsultingRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_For_user_ConsultingRoomId");

                    b.HasOne("thirdAssignment.Domain.Entities.UserRol", "UserRol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thirdAssignment.Domain.Entities.UserRol", null)
                        .WithMany("users")
                        .HasForeignKey("UserRolId");

                    b.Navigation("ConsultingRoom");

                    b.Navigation("UserRol");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("labTestAppointments");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.AppointmentState", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.ConsultingRoom", b =>
                {
                    b.Navigation("appointments");

                    b.Navigation("doctors");

                    b.Navigation("labTestAppointments");

                    b.Navigation("labTests");

                    b.Navigation("patients");

                    b.Navigation("users");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.LabTest", b =>
                {
                    b.Navigation("labTestAppointments");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.Patient", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("thirdAssignment.Domain.Entities.UserRol", b =>
                {
                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
